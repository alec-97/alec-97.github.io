<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>农行广研面试复盘</title>
    <link href="/2022/11/10/%E5%86%9C%E8%A1%8C%E5%B9%BF%E7%A0%94%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"/>
    <url>/2022/11/10/%E5%86%9C%E8%A1%8C%E5%B9%BF%E7%A0%94%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="title-农行广研面试复盘"><a href="#title-农行广研面试复盘" class="headerlink" title="title: 农行广研面试复盘"></a>title: 农行广研面试复盘</h1><h3 id="001-一个类具体是怎么加载的？"><a href="#001-一个类具体是怎么加载的？" class="headerlink" title="001 - 一个类具体是怎么加载的？"></a>001 - 一个类具体是怎么加载的？</h3><blockquote><p>  参考：</p><ul><li><p>  <a href="https://blog.csdn.net/qweqwruio/article/details/81359906">类加载过程是怎样的？ - CSDN - wiseph</a></p></li><li><p>  深入理解JVM</p></li></ul></blockquote><p>一种三个阶段，加载、链接、初始化。加载是将静态的字节码加载到JVM中，链接是将静态的数据和运行中的JVM信息关联起来，初始化是对静态变量和静态代码块等内容赋初始值（用户定义的初始值）。</p><p>1.加载阶段</p><p>将来自于class文件、jar文件、网络数据源等地方的字节码文件加载到JVM里面，并在JVM中映射为JVM认可的class对象</p><p>2.链接阶段</p><p>（1）验证</p><p>验证字节码是否合法、是否安全，以防破坏JVM的安全运行。</p><p>（2）准备</p><p>将类或接口中的静态变量设置初始值，此处的重点是给静态变量分配内存空间，赋予默认的初始值，而不是用户定义的显示初始值。</p><p>比如静态变量<code>static int a = 1;</code>，此处会初始化为 int 类型的初始值 0，而不是初始化为 1。</p><p>（3）解析</p><p>将<code>常量池</code>中的 符号引用 替换为 直接引用。</p><p>符号引用是字面量，在JVM中对应的对象可以还未存在。直接引用是地址值，即指针、偏移量或句柄，指向的对象在内存中必须已经存在。</p><p>举例：中国的首都是字面量，北京市是直接引用。</p><p>解析主要对 类或接口，字段，类方法，接口方法，方法类型等进行解析。</p><p>3.初始化阶段</p><blockquote><p>  准备阶段主要对静态变量分配空间，初始化阶段主要对类的静态变量显示赋初始值和执行静态代码块的逻辑。</p></blockquote><p>即静态变量赋初始值、执行静态代码块的逻辑。</p><hr><h5 id="知识扩展："><a href="#知识扩展：" class="headerlink" title="知识扩展："></a>知识扩展：</h5><ol><li> Java 8之前的类加载器</li></ol><p>(1)启动类加载器（Bootstrap Class-Loader），加载jre/lib下面的jar文件，如rt.jar.</p><p>(2)扩展类加载器（Extension or Ext Class-Loader），负责加载我们放到jre/lib/ext目录下面的jar包，这就是所谓的extension机制。该目录也可以通过设置“java.ext.dirs”来覆盖。</p><p>(3)应用类加载器（Application or App Class-Loader），就是加载我们最熟悉的classpath的内容。这里有一个容易混淆的概念，系统（System）类加载器，通常来说，其默认就是JDK內建的应用类加载器。</p><blockquote><p>  自定义类加载器:</p>  <figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>loader<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yourcorp<span class="token punctuation">.</span></span>YourClassLoader</span> <span class="token class-name">HelloWorld</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>  如果我们指定了这个参数，JDK內建的应用类加载器就会成为定制加载器的父亲，这种方式通常用在类似需要改变双亲委派模式的场景。</p></blockquote><p>参考图：</p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211101430487.png" alt="image-20221110143031413" style="zoom:67%;" /><p>2.双亲委派机制</p><p>当类加载器（Class-Loader）试图加载某个类型的时候，除非父加载器找不到相应的类型，否则尽量将这个任务代理给当前加载器的父加载器去做。</p><p>参考上面这个结构图就很容易理解了。试想，如果不同类加载器都自己加载需要的某个类型，那么就会出现多次重复加载，完全是种浪费。</p><p>通常类加载器机制有三个基本特征：</p><ul><li>  双亲委派模型。但不是所有类加载都遵守这个模型，有的时候，启动类加载器所加载的类型，是可能要加载用户代码的。比如JDK内部的ServiceProvider/ServiceLoader机制，用户可以在标准API框架上，提供自己的实现，JDK也需要提供些默认的参考实现。例如，Java中JNDI、JDBC、文件系统、Cipher等很多方面，都是利用的这种机制，这种情况就不会用双亲委派模型去加载，而是利用所谓的上下文加载器。</li><li>  可见性。子加载器可以访问父加载器加载的类型，但是反过来是不允许的。不然，因为缺少必要的隔离，我们就没有办法利用类加载器去实现容器的逻辑。</li><li>  单一性。由于父加载器的类型对于子加载器是可见的，所以父加载器中加载过的类型，就不会在子加载器中重复加载。但是注意，类加载器“邻居”间，同一类型仍然可以被加载多次，因为互相不可见。</li></ul><h3 id="002-一个JVM程序有多少个类加载器？"><a href="#002-一个JVM程序有多少个类加载器？" class="headerlink" title="002 - 一个JVM程序有多少个类加载器？"></a>002 - 一个JVM程序有多少个类加载器？</h3><blockquote><p>  参考：</p><ul><li>  <a href="https://segmentfault.com/q/1010000014745626">JAVA为什么要有多个类加载器，1个不行吗 - segmentfault - 近光176</a></li></ul></blockquote><blockquote><p>  【前言】</p><ul><li>  类加载的作用是通过类名获取二进制字节流</li><li>  主要分为四种类加载器：启动类-&gt;扩展类-&gt;应用类-&gt;自定义类</li><li>  双亲委派的好处：越基础的类交给越高级的类加载器</li><li>  问题：只有一个加载器来加载全部的类不行吗</li></ul></blockquote><p>JVM需要不同的类加载器，而不是使用同一个类加载器，本质上是对类有不同的需求所导致的。不同的场景下使用不同的类加载器，目的是更加的灵活。</p><p>在明确 目的的情况下， 专用代码 比 通用代码 更简单，也更有效。</p><p>使用不同的类加载器，方便在不同的路径下加载不同的类。更加的灵活，也方便对类进行管理。</p><p>举例两个场景：</p><p>（1）在JVM中运行不同的程序，每个程序依赖同一个 x 类，但是依赖的该类的版本不同。有的需要版本高的 x 类，有的需要版本低的 x 类。因此使用不同的类加载器可以加载不同的类。</p><p>（2）Java具有面向切面进行功能增强的特性。怎样实现修改一个类进行特性的功能增强，而不对其它的类库产生影响呢？一个方面的方式就是对每个类库使用独立的类加载器。</p><h3 id="003-mysql的性能瓶颈在哪里，怎么排查"><a href="#003-mysql的性能瓶颈在哪里，怎么排查" class="headerlink" title="003 - mysql的性能瓶颈在哪里，怎么排查"></a>003 - mysql的性能瓶颈在哪里，怎么排查</h3><blockquote><p>  【参考】</p><ul><li>  <a href="https://developer.aliyun.com/article/177931">优化系列 | 实例解析MySQL性能瓶颈排查定位 - 阿里云开发者社区 - 晚来风急</a></li></ul></blockquote><hr><p>http常见的状态码要背一下，不要只知道大概</p><p>Java是值传递还是引用传递</p>]]></content>
    
    
    <categories>
      
      <category>面试复盘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>复盘</tag>
      
      <tag>农业银行研发中心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决一直困扰的坚果云在资源管理器中左边栏显示问题</title>
    <link href="/2022/11/08/%E8%A7%A3%E5%86%B3%E4%B8%80%E7%9B%B4%E5%9B%B0%E6%89%B0%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%9C%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E5%B7%A6%E8%BE%B9%E6%A0%8F%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/08/%E8%A7%A3%E5%86%B3%E4%B8%80%E7%9B%B4%E5%9B%B0%E6%89%B0%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%9C%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E5%B7%A6%E8%BE%B9%E6%A0%8F%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>  参考：<a href="https://loesspie.com/2021/01/19/win10-remove-jianguoyun/">https://loesspie.com/2021/01/19/win10-remove-jianguoyun/</a></p><p>  日期：2022年11月8日alec实测有效</p></blockquote><p>其实一直在用坚果云，但仅仅是自动同步一些文件和文件夹，并不需要在我的资源管理器里有那么强的存在感<br>同时现在用 库 功能比较多，汇总各类相同属性/用途的文件或文件夹不要太方便。所以它在那儿占着位置看着碍眼了<br>但网上一堆方法都无效，只能自己上，搞定之后记录下</p><p>首先是通过全局搜索坚果云，找到了N个条目，然后尝试修改其名称（默认项），如改为坚果云云</p><p>当找到正确的条目之后，打开资源管理器，会发现左边栏会变成坚果云云，然后将此项的ispinned从1改成0，会发现资源管理器左栏的图标已经消失</p><p>消失之后，再全局搜索坚果云云，将其改成坚果云.</p><p>如此，便整洁许多</p><p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211081724039.png" alt="image-20221108172445976"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>坚果云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>坚果云</tag>
      
      <tag>资源管理器</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
