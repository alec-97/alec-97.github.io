<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/15/%E6%96%B0%E5%BB%BA%20Markdown/"/>
    <url>/2022/11/15/%E6%96%B0%E5%BB%BA%20Markdown/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>缓冲流如何提高读写性能</title>
    <link href="/2022/11/15/%EF%BC%88%EF%BC%89%E7%BC%93%E5%86%B2%E6%B5%81%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%AF%BB%E5%86%99%E6%80%A7%E8%83%BD/"/>
    <url>/2022/11/15/%EF%BC%88%EF%BC%89%E7%BC%93%E5%86%B2%E6%B5%81%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%AF%BB%E5%86%99%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java使用FileWriter类向文件写入内容</title>
    <link href="/2022/11/14/%EF%BC%88%E2%88%9A%EF%BC%892022%E5%B9%B411%E6%9C%8814%E6%97%A5%20-%20Java%E4%BD%BF%E7%94%A8FileWriter%E7%B1%BB%E5%90%91%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%86%85%E5%AE%B9/"/>
    <url>/2022/11/14/%EF%BC%88%E2%88%9A%EF%BC%892022%E5%B9%B411%E6%9C%8814%E6%97%A5%20-%20Java%E4%BD%BF%E7%94%A8FileWriter%E7%B1%BB%E5%90%91%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Writer</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用FileWriter向文本文件中写信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>        <span class="token comment">//1.创建流</span>        <span class="token class-name">Writer</span> fw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*创建txt文件*/</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>            <span class="token comment">//2.写入信息</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3.刷新缓冲区，即写入内容</span>            fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fw <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 4.关闭流,关闭缓冲流时，也会刷新一次缓冲区</span>                fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211141442388.png" alt="image-20221114144244343"></p>]]></content>
    
    
    <categories>
      
      <category>Java技术栈</category>
      
      <category>JavaIO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中Class.getMethods()和Class.getDeclaredMethods()的区别</title>
    <link href="/2022/11/14/Java%E4%B8%ADClass.getMethods()%E5%92%8CClass.getDeclaredMethods()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/11/14/Java%E4%B8%ADClass.getMethods()%E5%92%8CClass.getDeclaredMethods()%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><p>两个方法的区别主要在于：getMethods()返回的是该类以及超类的公共方法。getDeclaredMethods()返回该类本身自己声明的包括公共、保护、默认（包）访问和私有方法，但并不包括超类中的方法。</p><h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*定义要被反射获取信息的类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publicMethod_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">protectedMethod_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">defaultMethod_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">privateMethod_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*方法测试*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"alec"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value is "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*结果*/</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>getMethods<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>publicMethod_1waitwaitwaitequalstoStringhashCodegetClassnotifynotifyAll<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>getDeclaredMethods<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>protectedMethod_2privateMethod_4defaultMethod_3publicMethod_1<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java技术栈</category>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE知识点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年11月11日新华三一面复盘</title>
    <link href="/2022/11/13/%EF%BC%88%E2%88%9A%EF%BC%892022%E5%B9%B411%E6%9C%8811%E6%97%A5%E6%96%B0%E5%8D%8E%E4%B8%89%E4%B8%80%E9%9D%A2%E5%A4%8D%E7%9B%98/"/>
    <url>/2022/11/13/%EF%BC%88%E2%88%9A%EF%BC%892022%E5%B9%B411%E6%9C%8811%E6%97%A5%E6%96%B0%E5%8D%8E%E4%B8%89%E4%B8%80%E9%9D%A2%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h2 id="1-依赖注入的方式有哪些？（√）"><a href="#1-依赖注入的方式有哪些？（√）" class="headerlink" title="1.依赖注入的方式有哪些？（√）"></a>1.依赖注入的方式有哪些？（√）</h2><blockquote><p>  <a href="https://pdai.tech/md/spring/spring-x-framework-ioc.html#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F">参考：依赖注入的三种方式 - Java 全栈知识体系 - pdai(√)</a></p></blockquote><p>什么是依赖注入：依赖指的是bean需要的参数值，比如bean中的简单类型属性、引用类型属性。给bean中的属性传递值的过程叫做依赖注入。</p><p>常见的依赖注入的方式有三种，分别是set方法注入、构造方法注入、基于注解的注入</p><h3 id="（1）参数注入方式一：set方法注入"><a href="#（1）参数注入方式一：set方法注入" class="headerlink" title="（1）参数注入方式一：set方法注入"></a>（1）参数注入方式一：set方法注入</h3><p>[xml配置方式 + set方法]进行依赖注入：</p><p>在xml配置文件中，通过set进行注入：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- services --></span>    <span class="token comment">&lt;!-- 要被注入的对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tech.pdai.springframework.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 注入的引用类型对象/属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- additional collaborators and configuration for this bean go here --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- more bean definitions for services go here --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>  使用property + value进行setter注入简单类型属性<br>  使用property + ref进行setter注入引用类型属性</p></blockquote><p>对应的，UserServiceImpl 类中需要为 userDao 属性添加set方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author pdai */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 属性声明</span>    <span class="token keyword">private</span> <span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">;</span>    <span class="token comment">// 无参构造</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 属性的set方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注解配置方式 + set方式 进行依赖注入</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 属性声明</span>    <span class="token keyword">private</span> <span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">;</span>    <span class="token comment">// [注解配置方式 + set方法进行]依赖注入</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="（2）参数注入方式二：构造方法注入"><a href="#（2）参数注入方式二：构造方法注入" class="headerlink" title="（2）参数注入方式二：构造方法注入"></a>（2）参数注入方式二：构造方法注入</h3><p>[xml配置方式 + 构造方法]进行依赖注入：</p><p>在xml配置文件中，通过<code>&lt;constructor-arg&gt;</code>进行构造方法方式的属性注入</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- services --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tech.pdai.springframework.service.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 通过构造方法进行属性注入 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- additional collaborators and configuration for this bean go here --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- more bean definitions for services go here --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在被注入的类的定义中，添有参的构造方法用于为属性输入值：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 声明属性</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">;</span>    <span class="token comment">// 有参构造方法进行属性注入</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token class-name">UserDaoImpl</span> userDaoImpl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDaoImpl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>[注解配置方式 + 构造方法]进行依赖注入：</p><p>注解的配置方式，省去了进行xml文件配置的繁琐</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 属性声明</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">;</span>    <span class="token comment">// 注解 + 构造方法 = 构造方法进行依赖注入</span>    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">// 这里@Autowired也可以省略</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">UserDaoImpl</span> userDaoImpl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDaoImpl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="（3）参数注入方式三：注解的方式进行注入"><a href="#（3）参数注入方式三：注解的方式进行注入" class="headerlink" title="（3）参数注入方式三：注解的方式进行注入"></a>（3）参数注入方式三：注解的方式进行注入</h3><p>set的方式进行依赖注入，是在 xml配置方式中 或者 注解配置方式 中通过set方法为类的属性进行传值</p><p>构造方法的方式进行依赖注入，是在 xml配置方式中 或者 注解配置方式 中通过构造方法为类的属性进行传值</p><p>而注解的方式进行依赖注入，则是直接在类中的对应属性上面打上注解，方便。</p><p>以@Autowired（自动注入）注解注入为例，修饰符有三个属性：Constructor，byType，byName。默认按照byType注入。</p><ul><li>  <strong>constructor</strong>：通过构造方法进行自动注入，spring会匹配与构造方法参数类型一致的bean进行注入，如果有一个多参数的构造方法，一个只有一个参数的构造方法，在容器中查找到多个匹配多参数构造方法的bean，那么spring会优先将bean注入到多参数的构造方法中。</li><li>  <strong>byName</strong>：被注入bean的id名必须与set方法后半截匹配，并且id名称的第一个单词首字母必须小写，这一点与手动set注入有点不同。</li><li>  <strong>byType</strong>：查找所有的set方法，将符合符合参数类型的bean注入。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="2-spring容器的bean是线程安全的吗（√）"><a href="#2-spring容器的bean是线程安全的吗（√）" class="headerlink" title="2.spring容器的bean是线程安全的吗（√）"></a>2.spring容器的bean是线程安全的吗（√）</h2><blockquote><p><a href="https://cloud.tencent.com/developer/article/1743283">面试：Spring 中的bean 是线程安全的吗？ - 腾讯云开发者社区 - JAVA日知录（√）</a></p><p><a href="https://tobebetterjavaer.com/sidebar/sanfene/spring.html#_14-spring-%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B-bean-%E4%BC%9A%E5%AD%98%E5%9C%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E5%90%97">14.Spring 中的单例 Bean 会存在线程安全问题吗？ - 面渣逆袭 - 三分恶（√）</a></p></blockquote><p>首先结论在这：Spring 中的单例 Bean不是线程安全的。</p><p>因为单例 Bean，是全局只有一个 Bean，所有线程共享。如果说单例 Bean，是一个无状态的，也就是线程中的操作不会对 Bean 中的成员变量执行查询以外的操作，那么这个单例 Bean 是线程安全的。比如 Spring mvc 的 Controller、Service、Dao 等，这些 Bean 大多是无状态的，只关注于方法本身。</p><p>假如这个 Bean 是有状态的，也就是会对 Bean 中的成员变量进行写操作，那么可能就存在线程安全的问题。</p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211131055092.png" alt="image-20221113105533020" style="zoom:50%;" /><hr><p>结论：Spring容器中的bean不是线程安全的</p><hr><p>spring中没有对bean提供线程安全的策略，但是bean具体是否安全，要根据bean的具体的scope来研究</p><hr><p>spring的bean的作用域有5种：</p><p>1、singleton:单例，默认作用域</p><p>2、prototype:原型，每次创建一个新对象</p><p>3、request:请求，每次Http请求创建一个新对象，适用于WebApplicationContext环境下</p><p>4、session:会话，同一个会话共享一个实例，不同会话使用不用的实例</p><p>5、global-session:全局会话，所有会话共享一个实例</p><hr><p>对于原型Bean,每次创建一个新对象，也就是线程之间并不存在Bean共享，自然是不会有线程安全的问题。</p><p>对于单例Bean,所有线程都共享一个单例实例Bean,因此是存在资源的竞争。</p><ul><li>如果单例Bean,是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行「查询」以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。</li><li>线程不安全主要是因为有写操作，因此如果bean是无状态的，只涉及到读操作，那么就不会有线程安全问题</li></ul><hr><p>spring单例，为什么controller、service和dao确能保证线程安全？</p><p>因为这几个bean是无状态的，不会保存数据，因此不存在线程安全问题。</p><p>如果自己需要的bean是有状态的，那么就需要开发人员自己动手进行线程安全的保证。其中一个最简单的办法就是将单例bean改为原型bean，这样每次请求bean都会创建一个新的bean，因此就可以保证线程安全。</p><p>controller、service和dao层本身并不是线程安全的，只是如果只是调用里面的方法，而且多线程调用一个实例的方法，会在内存中复制变量，这是自己的线程的工作内存，是安全的。</p><p>所以其实任何无状态单例都是线程安全的。Spring的根本就是通过大量这种单例构建起系统，以事务脚本的方式提供服务。</p><hr><p>首先问@Controller @Service是不是线程安全的？</p><p>答：默认配置下不是的。为啥呢？因为默认情况下@Controller没有加上@Scope，没有加@Scope就是默认值singleton，单例的。意思就是系统只会初始化一次Controller容器，所以每次请求的都是同一个Controller容器，当然是非线程安全的。</p><hr><p>分析各种情况是否是线程安全的？</p><p>（1）单例模式 + 简单类型属性：不是线程安全的</p><p>（2）单例模式 + ThreadLocal：线程安全</p><p>（3）原型模式 + 简单类型属性：线程安全</p><p>（4）原型模式 + 引用类型属性：不是线程安全的</p><p>（5）原型模式 + 静态变量：不是线程安全的</p><hr><p>小结：</p><p>1.在 @Controller/@Service 等容器中，默认情况下，scope值是单例-singleton的，也是线程不安全的。</p><p>2.尽量不要在@Controller/@Service 等容器中定义静态变量，不论是单例(singleton)还是多实例(prototype)他都是线程不安全的。</p><p>3.默认注入的Bean对象，在不设置scope的时候他也是线程不安全的。</p><p>4.一定要定义变量的话，用ThreadLocal来封装，这个是线程安全的。</p><hr><blockquote><h3 id="子问题：单例-Bean-线程安全问题怎么解决呢？"><a href="#子问题：单例-Bean-线程安全问题怎么解决呢？" class="headerlink" title="子问题：单例 Bean 线程安全问题怎么解决呢？"></a>子问题：单例 Bean 线程安全问题怎么解决呢？</h3><p>  常见的有这么些解决办法：</p><p>  （1）将 Bean 定义为多例</p><p>  这样每一个线程请求过来都会创建一个新的 Bean，但是这样容器就不好管理 Bean，不能这么办。</p><p>  （2）在 Bean 对象中尽量避免定义可变的成员变量</p><p>  削足适履了属于是，也不能这么干。</p><p>  （3）将 Bean 中的成员变量保存在 ThreadLocal 中 ⭐</p><p>  我们知道 ThredLoca 能保证多线程下变量的隔离，可以在类中定义一个 ThreadLocal 成员变量，将需要的可变成员变量保存在 ThreadLocal 里，这是推荐的一种方式</p></blockquote><h2 id="3-用了哪些注解以及自动装配的原理（√）"><a href="#3-用了哪些注解以及自动装配的原理（√）" class="headerlink" title="3.用了哪些注解以及自动装配的原理（√）"></a>3.用了哪些注解以及自动装配的原理（√）</h2><h2 id="3-1-自动装配的原理（√）"><a href="#3-1-自动装配的原理（√）" class="headerlink" title="3.1 - 自动装配的原理（√）"></a>3.1 - 自动装配的原理（√）</h2><blockquote><p>  【参考】</p><p>  黑马程序员 - P15 Spring-13-自动装配（√）</p></blockquote><h3 id="3-1-1-自动装配的步骤"><a href="#3-1-1-自动装配的步骤" class="headerlink" title="3.1.1 自动装配的步骤"></a>3.1.1 自动装配的步骤</h3><p>（1）被装配的类为被装配的属性提供set方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BookDao</span> bookDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBookDao</span><span class="token punctuation">(</span><span class="token class-name">BookDao</span> bookDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bookDao <span class="token operator">=</span> bookDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book service save ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bookDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>（2）实现自动装配的配置</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.BookDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.service.impl.BookServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-1-2-细节-注意事项"><a href="#3-1-2-细节-注意事项" class="headerlink" title="3.1.2 细节 注意事项"></a>3.1.2 细节 注意事项</h3><p>自动装配内部其实是调用的被注入属性值的类的set方法，因此set方法不能省略，如果省略则无法完成自动装配。</p><p>被注入的对象必须要被Spring的IOC容器管理，即需要将被注入的类作为bean注册到容器中</p><p>按照类型在Spring的IOC容器中如果找到多个对象，会报<code>NoUniqueBeanDefinitionException</code></p><p>按照类型装配，连被注入的bean的名字都可以不起，即省去bean定义的id属性：</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--省去bean的名字--></span><span class="token comment">&lt;!--&lt;bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.BookDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-1-3-自动装配-注意事项"><a href="#3-1-3-自动装配-注意事项" class="headerlink" title="3.1.3 自动装配 注意事项"></a>3.1.3 自动装配 注意事项</h3><ol><li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li><li>使用按类型装配时（byType）必须保障容器中相同类型的bean唯一，推荐使用</li><li>使用按名称装配时（byName）必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用</li><li>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效</li></ol><h2 id="3-2-Spring常用的注解有哪些-（√）"><a href="#3-2-Spring常用的注解有哪些-（√）" class="headerlink" title="3.2 - Spring常用的注解有哪些?（√）"></a>3.2 - Spring常用的注解有哪些?（√）</h2><blockquote><p>  【参考】</p><p>  <a href="https://tobebetterjavaer.com/sidebar/sanfene/spring.html#_3-spring-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%91%A2">3.Spring 有哪些常用注解呢？ - 面渣逆袭 - 三分恶（√）</a></p></blockquote><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211131520454.png" alt="image-20221113152023394" style="zoom:67%;" /><p><strong>简略的介绍：</strong></p><p>（1）Web：</p><p>==@Controller：==组合注解（组合了@Component 注解），应用在 MVC 层（控制层）</p><p>==@RestController：==该注解为一个组合注解，相当于@Controller 和@ResponseBody 的组合，注解在类上，意味着，该 Controller 的所有方法都默认加上了@ResponseBody。</p><p>==@ResponseBody：==支持将返回值放在 response 内，而不是一个页面，通常用户返回 json 数据。</p><p>==@RequestMapping：==用于映射 Web 请求，包括访问路径和参数。如果是 Restful 风格接口，还可以根据请求类型使用不同的注解：</p><ul><li>  ==@GetMapping==</li><li>  ==@PostMapping==</li><li>  ==@PutMapping==</li><li>  ==@DeleteMapping==</li></ul><p>==@RequestBody：==允许 request 的参数在 request 体中，而不是在直接连接在地址后面。</p><p>==@PathVariable：==用于接收路径参数，比如 @RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为 Restful 的接口实现方法。</p><p>（2）容器：</p><p>==@Component：==表示一个带注释的类是一个“组件”，成为 Spring 管理的 Bean。当使用基于注解的配置和类路径扫描时，这些类被视为自动检测的候选对象。同时@Component 还是一个元注解。</p><p>==@Service：==组合注解（组合了@Component 注解），应用在 service 层（业务逻辑层）。</p><p>==@Repository：==组合注解（组合了@Component 注解），应用在 dao 层（数据访问层）。</p><p>==@Bean：==注解在方法上，声明当前方法的返回值为一个 Bean。返回的 Bean 对应的类中可以定义 init()方法和 destroy()方法，然后在@Bean(initMethod=”init”,destroyMethod=”destroy”)定义，在构造之后执行 init，在销毁之前执行 destroy。</p><p>==@Autowired：==Spring 提供的工具（由 Spring 的依赖注入工具（BeanPostProcessor、BeanFactoryPostProcessor）自动注入）。</p><p>==@Qualifier：==该注解通常跟 @Autowired 一起使用，当想对注入的过程做更多的控制，@Qualifier 可帮助配置，比如两个以上相同类型的 Bean 时 Spring 无法抉择，用到此注解</p><p>==@Value：==可用在字段，构造器参数跟方法参数，指定一个默认值，支持 #{} 跟 ${} 两个方式。一般将 SpringbBoot 中的 application.properties 配置的属性值赋值给变量。</p><p>==@Scope:==定义我们采用什么模式去创建 Bean（方法上，得有@Bean） 其设置类型包括：Singleton 、Prototype、Request 、 Session、GlobalSession。</p><p>==@Configuration：==声明当前类是一个配置类（相当于一个 Spring 配置的 xml 文件）</p><p>（3）AOP：</p><p>==@Aspect==:声明一个切面（类上） 使用@After、@Before、@Around 定义建言（advice），可直接将拦截规则（切点）作为参数。</p><p>==@After==：在方法执行之后执行（方法上）。<br>==@Before==:在方法执行之前执行（方法上）。<br>==@Around== :在方法执行之前与之后执行（方法上）。<br>==PointCut==:声明切点 在 java 配置类中使用@EnableAspectJAutoProxy 注解开启 Spring 对 AspectJ 代理的支持（类上）。</p><p>（4）事务：</p><p>==@Transactional==：在要开启事务的方法上使用@Transactional 注解，即可声明式开启事务。</p><h2 id="4-queue线程安全的集合了解吗（整理每个集合线程对应安全的集合）（√）"><a href="#4-queue线程安全的集合了解吗（整理每个集合线程对应安全的集合）（√）" class="headerlink" title="4.queue线程安全的集合了解吗（整理每个集合线程对应安全的集合）（√）"></a>4.queue线程安全的集合了解吗（整理每个集合线程对应安全的集合）（√）</h2><p>Java 提供的线程安全的 Queue 可以分为阻塞队列和非阻塞队列，其中阻塞队列的典型例子是 BlockingQueue，非阻塞队列的典型例子是 ConcurrentLinkedQueue。</p><h2 id="4-1-队列线程安全版本之阻塞队列"><a href="#4-1-队列线程安全版本之阻塞队列" class="headerlink" title="4.1 - 队列线程安全版本之阻塞队列"></a>4.1 - 队列线程安全版本之阻塞队列</h2><blockquote><p>  【参考】</p><p>  <a href="https://javaguide.cn/java/concurrent/java-concurrent-collections.html#concurrentlinkedqueue">Java 常见并发容器总结 - JavaGuide（√）</a></p></blockquote><h3 id="1-BlockingQueue-简介"><a href="#1-BlockingQueue-简介" class="headerlink" title="1 - BlockingQueue 简介"></a>1 - BlockingQueue 简介</h3><p>队列的高性能非阻塞版本是：<code>ConcurrentLinkedQueue</code></p><p>队列的阻塞版本是：<code>BlockingQueue</code></p><hr><p>阻塞队列（<code>BlockingQueue</code>）被广泛使用在“生产者-消费者”问题中，其原因是 <code>BlockingQueue</code> 提供了可阻塞的插入和移除的方法。当队列容器已满，生产者线程会被阻塞，直到队列未满；当队列容器为空时，消费者线程会被阻塞，直至队列非空时为止。</p><hr><p>BlockingQueue 是一个接口，继承自 Queue 接口；同时 Queue 接口继承自 Collection 接口。</p><p>下面是BlockingQueue的相关实现类：</p><p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211131805123.png" alt="image-20221113180502066"></p><p>常见的 BlockingQueue 有 ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue。</p><h3 id="2-ArrayBlockingQueue"><a href="#2-ArrayBlockingQueue" class="headerlink" title="2 - ArrayBlockingQueue"></a>2 - ArrayBlockingQueue</h3><blockquote><p>  随手记：</p><p>  ArrayBlockingQueue 是有界队列实现类</p><p>  LinkedBlockingQueue 是无界队列实现类</p></blockquote><p>ArrayBlockingQueue 是 BlockingQueue 接口的有界队列实现类，底层采用数组来实现。</p><hr><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token keyword">implements</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><hr><p><code>ArrayBlockingQueue</code> 一旦创建，容量不能改变。容量是有限的，有界的。</p><hr><blockquote><p>  使用 ReentrantLock 进行并发控制</p></blockquote><p>其并发控制采用可重入锁 <code>ReentrantLock</code> ，不管是插入操作还是读取操作，都需要获取到锁才能进行操作。</p><p>当队列容量满时，尝试将元素放入队列将导致操作阻塞;尝试从一个空队列中取一个元素也会同样阻塞。</p><hr><blockquote><p>  ReentrantLock 默认是非公平的，因为绝对的公平性会降低吞吐量。因此 ArrayBlockingQueue 默认也是非公平的阻塞队列。即最先阻塞的队列元素，不一定最先获得锁。</p></blockquote><p><code>ArrayBlockingQueue</code> 默认情况下不能保证线程访问队列的公平性，所谓公平性是指严格按照线程等待的绝对时间顺序，即最先等待的线程能够最先访问到 <code>ArrayBlockingQueue</code>。而非公平性则是指访问 <code>ArrayBlockingQueue</code> 的顺序不是遵守严格的时间顺序，有可能存在，当 <code>ArrayBlockingQueue</code> 可以被访问时，长时间阻塞的线程依然无法访问到 <code>ArrayBlockingQueue</code>。如果保证公平性，通常会降低吞吐量。如果需要获得公平性的 <code>ArrayBlockingQueue</code>，可采用如下代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在创建该对象的时候，指定队列的长度和执行公平锁。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="3-LinkedBlockingQueue"><a href="#3-LinkedBlockingQueue" class="headerlink" title="3 - LinkedBlockingQueue"></a>3 - LinkedBlockingQueue</h3><h3 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h3><blockquote><p>  【辨析】</p><p>  ArrayBlockingQueue 的底层是数组，是有界的。</p><p>  LinkedBlockingQueue 的底层是单向链表，可以是有界的，也可以是无界的。</p><p>  LinkedBlockingQueue 与 ArrayBlockingQueue 相比起来具有更高的吞吐量</p></blockquote><p>单向链表实现的阻塞队列，可以是有界的，也可以是无界的。</p><p>有界指的是：为了防止 LinkedBlockingQueue 容量迅速增，损耗大量内存。通常在创建 LinkedBlockingQueue 对象时，会指定其大小。</p><p>无界指的是：如果未指定，容量等于 Integer.MAX_VALUE，那么就是无界的。</p><p>相关的构造方法代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    *某种意义上的无界队列    */</span>   <span class="token keyword">public</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用的是有界队列，将容量指定为 Integer.MAX_VALUE</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    *有界队列    */</span>   <span class="token keyword">public</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>       last <span class="token operator">=</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4-PriorityBlockingQueue"><a href="#4-PriorityBlockingQueue" class="headerlink" title="4 - PriorityBlockingQueue"></a>4 - PriorityBlockingQueue</h3><blockquote><p>  ArrayBlockingQueue 是有界阻塞队列，LinkedBlockingQueue 和 PriorityBlockingQueue 是无界阻塞队列</p></blockquote><p>PriorityBlockingQueue 是一个支持优先级的无界阻塞队列。</p><hr><p>默认采用自然顺序进行排序，也可以自定义排序规则</p><hr><p>PriorityBlockingQueue 并发控制采用的是可重入锁 ReentrantLock</p><hr><p>该队列为无界队列，PriorityBlockingQueue 只能指定初始的队列大小，后面插入元素的时候，如果空间不够的话会自动扩容</p><hr><p>简单地说，它就是 PriorityQueue 的线程安全版本。不可以插入 null 值，同时，插入队列的对象必须是可比较大小的（comparable），否则报 ClassCastException 异常。它的插入操作 put 方法不会 block，因为它是无界队列（take 方法在队列为空的时候会阻塞）。</p><h2 id="4-2-队列线程安全版本之非阻塞队列"><a href="#4-2-队列线程安全版本之非阻塞队列" class="headerlink" title="4.2 - 队列线程安全版本之非阻塞队列"></a>4.2 - 队列线程安全版本之非阻塞队列</h2><p>Java 提供的线程安全的 Queue 可以分为阻塞队列和非阻塞队列，其中阻塞队列的典型例子是 BlockingQueue，非阻塞队列的典型例子是 ConcurrentLinkedQueue，在实际应用中要根据实际需要选用阻塞队列或者非阻塞队列。 阻塞队列可以通过加锁来实现，非阻塞队列可以通过 CAS 操作实现。</p><p>从名字可以看出，ConcurrentLinkedQueue这个队列使用链表作为其数据结构．ConcurrentLinkedQueue 应该算是在高并发环境中性能最好的队列了。它之所有能有很好的性能，是因为其内部复杂的实现。</p><p>ConcurrentLinkedQueue 内部代码我们就不分析了，大家知道 ConcurrentLinkedQueue 主要使用 CAS 非阻塞算法来实现线程安全就好了。</p><p>ConcurrentLinkedQueue 适合在对性能要求相对较高，同时对队列的读写存在多个线程同时进行的场景，即如果对队列加锁的成本较高则适合使用无锁的 ConcurrentLinkedQueue 来替代。</p><h2 id="4-3-List的线程安全的版本-CopyOnWriteArrayList"><a href="#4-3-List的线程安全的版本-CopyOnWriteArrayList" class="headerlink" title="4.3 - List的线程安全的版本 CopyOnWriteArrayList"></a>4.3 - List的线程安全的版本 CopyOnWriteArrayList</h2><h3 id="1-CopyOnWriteArrayList-简介"><a href="#1-CopyOnWriteArrayList-简介" class="headerlink" title="1 - CopyOnWriteArrayList 简介"></a>1 - CopyOnWriteArrayList 简介</h3><p>==类的声明：==</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>==思想：==</p><p>在多数的场景中，读操作远远多于写操作，并且读操作不会修改数据，因此如果无论读或者写都加锁，那么就太浪费资源和性能了。因此应该允许并发进行读操作，这是线程安全的。</p><p>这种思想和 ReentrantReadWriteLock 读写锁的思想非常类似，也就是读读共享、写写互斥、读写互斥、写读互斥。但是JDK 中提供的 CopyOnWriteArrayList 类比相比于在读写锁的思想又更进一步。</p><p>为了将读取的性能发挥到极致，CopyOnWriteArrayList 读取是完全不用加锁的，并且更厉害的是：写入也不会阻塞读取操作。只有写入和写入之间需要进行同步等待。这样一来，读操作的性能就会大幅度提升。</p><p>ReentrantReadWriteLock 无论在写写、读写、写读的时候，都需要加锁；但是 CopyOnWriteArrayList 只需要在写写的时候进行阻塞，其它的时候完全不用阻塞。</p><h3 id="2-CopyOnWriteArrayList-是如何做到只在-写-写-的时候，阻塞？"><a href="#2-CopyOnWriteArrayList-是如何做到只在-写-写-的时候，阻塞？" class="headerlink" title="2 - CopyOnWriteArrayList 是如何做到只在 写-写 的时候，阻塞？"></a>2 - CopyOnWriteArrayList 是如何做到只在 写-写 的时候，阻塞？</h3><p>CopyOnWriteArrayList 类的所有可变操作（add，set 等等）都是通过创建底层数组的新副本来实现的。当 List 需要被修改的时候，我并不修改原有内容，而是对原有数据进行一次复制，将修改的内容写入副本。写完之后，再将修改完的副本替换原来的数据，这样就可以保证写操作不会影响读操作了。</p><p>但是在写写的时候，因此两个线程都要修改数据，那么这个时候就要排队一个一个来了，不然就会产生线程安全问题。</p><p>从 CopyOnWriteArrayList 的名字就能看出 CopyOnWriteArrayList 是满足 CopyOnWrite 的。所谓 CopyOnWrite 也就是说：在计算机，如果你想要对一块内存进行修改时，我们不在原有内存块中进行写操作，而是将内存拷贝一份，在新的内存中进行写操作，写完之后呢，就将指向原来内存指针指向新的内存，原来的内存就可以被回收掉了。</p><h3 id="3-CopyOnWriteArrayList-读取和写入源码简单分析"><a href="#3-CopyOnWriteArrayList-读取和写入源码简单分析" class="headerlink" title="3 - CopyOnWriteArrayList 读取和写入源码简单分析"></a>3 - CopyOnWriteArrayList 读取和写入源码简单分析</h3><h4 id="3-1-读取操作的实现"><a href="#3-1-读取操作的实现" class="headerlink" title="3.1 - 读取操作的实现"></a>3.1 - 读取操作的实现</h4><p>读取操作没有任何同步控制和锁操作，理由就是内部数组 array 不会发生修改，只会被另外一个 array 替换，因此可以保证数据安全。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** The array, accessed only via getArray/setArray. */</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="3-2-写入操作的实现"><a href="#3-2-写入操作的实现" class="headerlink" title="3.2 - 写入操作的实现"></a>3.2 - 写入操作的实现</h4><p>CopyOnWriteArrayList 写入操作 add()方法在添加集合的时候加了锁，保证了同步，避免了多线程写的时候会 copy 出多个副本出来。</p><p>add方法：加锁，然后拷贝出一个新的数组，新的数组的长度是原来的长度 + 1，然后在新数组的末尾添加元素，并将指针指向新的数组。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Appends the specified element to the end of this list.     *     * @param e element to be appended to this list     * @return &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;)     */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加锁</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝新数组</span>        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放锁</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="4-4-ConcurrentHashMap"><a href="#4-4-ConcurrentHashMap" class="headerlink" title="4.4 - ConcurrentHashMap"></a>4.4 - ConcurrentHashMap</h2><p>==直接加锁存在严重的性能问题==</p><p>我们知道 <code>HashMap</code> 不是线程安全的，在并发场景下如果要保证一种可行的方式是使用 <code>Collections.synchronizedMap()</code> 方法来包装我们的 <code>HashMap</code>。但这是通过使用一个全局的锁来同步不同线程间的并发访问，因此会带来不可忽视的性能问题。</p><p>==HashMap 的线程安全版本==</p><p>所以就有了 HashMap 的线程安全版本—— ConcurrentHashMap 的诞生。</p><p>在 ConcurrentHashMap 中，无论是读操作还是写操作都能保证很高的性能：在进行读操作时(几乎)不需要加锁，而在写操作时通过锁分段技术只对所操作的段加锁而不影响客户端对其它段的访问。</p><p>读操作的时候几乎不需要加锁，在写操作的时候，使用分段锁技术，细粒度地只对操作的位置进行加锁，其它的问题仍然可以继续访问。</p><h2 id="5-newFixedThreadPool梳理（√）"><a href="#5-newFixedThreadPool梳理（√）" class="headerlink" title="5.newFixedThreadPool梳理（√）"></a>5.newFixedThreadPool梳理（√）</h2><p>（1）newFixedThreadPool</p><p>固定的n个核心线程，多余的任务去阻塞队列排队，阻塞队列是LinkedBlockingQueue，是无限的队列，有内存溢出风险。</p><p>（2）SingleThreadExecutor（只有一个核心线程）</p><p>当 newFixedThreadPool 的核心线程数量为 1 的时候，为 SingleThreadExecutor 。</p><p>（3）newCachedThreadPool</p><p>线程线程数量为0，任务先放到阻塞队列中，如果有空闲的最大线程，则复用，没有的话则创建。可以创建无限个线程。阻塞队列中不存储任务。</p><p>使用了SynchronousBlockingQueue作为任务队列，不存储元素，吞吐量高于 LinkedBlockingQueue 。</p>]]></content>
    
    
    <categories>
      
      <category>面试复盘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>复盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>滕王阁序 - 唐 - 王勃</title>
    <link href="/2022/11/11/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F%20-%20%E5%94%90%20-%20%E7%8E%8B%E5%8B%83/"/>
    <url>/2022/11/11/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F%20-%20%E5%94%90%20-%20%E7%8E%8B%E5%8B%83/</url>
    
    <content type="html"><![CDATA[<p>豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</p><p>时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿；临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</p><p>披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰弥津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨；雁阵惊寒，声断衡阳之浦。</p><p>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？</p><p>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</p><p>勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</p><p>呜乎！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔：</p><p>滕王高阁临江渚，佩玉鸣鸾罢歌舞。</p><p>画栋朝飞南浦云，珠帘暮卷西山雨。</p><p>闲云潭影日悠悠，物换星移几度秋。</p><p>阁中帝子今何在？槛外长江空自流。</p>]]></content>
    
    
    <categories>
      
      <category>生活乐趣</category>
      
      <category>诗歌品读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诗词</tag>
      
      <tag>品读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寒窑赋（劝世章） - 北宋 - 吕蒙正</title>
    <link href="/2022/11/11/%E5%AF%92%E7%AA%91%E8%B5%8B%EF%BC%88%E5%8A%9D%E4%B8%96%E7%AB%A0%EF%BC%89%20-%20%E5%8C%97%E5%AE%8B%20-%20%E5%90%95%E8%92%99%E6%AD%A3/"/>
    <url>/2022/11/11/%E5%AF%92%E7%AA%91%E8%B5%8B%EF%BC%88%E5%8A%9D%E4%B8%96%E7%AB%A0%EF%BC%89%20-%20%E5%8C%97%E5%AE%8B%20-%20%E5%90%95%E8%92%99%E6%AD%A3/</url>
    
    <content type="html"><![CDATA[<p>天有不测风云，人有旦夕祸福。蜈蚣百足，行不及蛇；雄鸡两翼，飞不过鸦。马有千里之程，无骑不能自往；人有冲天之志，非运不能自通。</p><p>盖闻：人生在世，富贵不能淫，贫贱不能移。文章盖世，孔子厄于陈邦；武略超群，太公钓于渭水。颜渊命短，殊非凶恶之徒；盗跖年长，岂是善良之辈。尧帝明圣，却生不肖之儿；瞽叟愚顽，反生大孝之子。张良原是布衣，萧何曾为县吏。晏子身无五尺，封作齐国宰相；孔明卧居草庐，能作蜀汉军师。楚霸虽雄，败于乌江自刎；汉王虽弱，竟有万里江山。李广有射虎之威，到老无封；冯唐有乘龙之才，一生不遇。韩信未遇之时，无一日三餐，及至遇行，腰悬三尺玉印，一旦时衰，死于阴人之手。</p><p>有先贫而后富，有老壮而少衰。满腹文章，白发竟然不中；才疏学浅，少年及第登科。深院宫娥，运退反为妓妾；风流妓女，时来配作夫人。</p><p>青春美女，却招愚蠢之夫；俊秀郎君，反配粗丑之妇。蛟龙未遇，潜水于鱼鳖之间；君子失时，拱手于小人之下。衣服虽破，常存仪礼之容；面带忧愁，每抱怀安之量。时遭不遇，只宜安贫守份；心若不欺，必然扬眉吐气。初贫君子，天然骨骼生成；乍富小人，不脱贫寒肌体。</p><p>天不得时，日月无光；地不得时，草木不生；水不得时，风浪不平；人不得时，利运不通。注福注禄，命里已安排定，富贵谁不欲？人若不依根基八字，岂能为卿为相？</p><p>吾昔寓居洛阳，朝求僧餐，暮宿破窖，思衣不可遮其体，思食不可济其饥，上人憎，下人厌，人道我贱，非我不弃也。今居朝堂，官至极品，位置三公，身虽鞠躬于一人之下，而列职于千万人之上，有挞百僚之杖，有斩鄙吝之剑，思衣而有罗锦千箱，思食而有珍馐百味，出则壮士执鞭，入则佳人捧觞，上人宠，下人拥。人道我贵，非我之能也，此乃时也、运也、命也。</p><p>嗟呼！人生在世，富贵不可尽用，贫贱不可自欺，听由天地循环，周而复始焉。</p>]]></content>
    
    
    <categories>
      
      <category>生活乐趣</category>
      
      <category>诗歌品读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诗词</tag>
      
      <tag>品读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>送东阳马生序 - 明 - 宋濂</title>
    <link href="/2022/11/10/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F%20-%20%E5%AE%8B%E6%BF%82/"/>
    <url>/2022/11/10/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F%20-%20%E5%AE%8B%E6%BF%82/</url>
    
    <content type="html"><![CDATA[<p>余幼时即嗜学。</p><p>家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。</p><p>录毕，走送之，不敢稍逾约。</p><p>以是人多以书假余，余因得遍观群书。</p><p>既加冠，益慕圣贤之道 ，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。</p><p>先达德隆望尊，门人弟子填其室，未尝稍降辞色。</p><p>余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。</p><p>当余之从师也，负箧曳屣行深山巨谷中，穷冬烈风，大雪深数尺，足肤皲裂而不知。</p><p>至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。</p><p>寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意。</p><p>以中有足乐者，不知口体之奉不若人也。</p><p>盖余之勤且艰若此。</p><p>今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？</p><p>今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。</p><p>其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！</p><p>东阳马生君则，在太学已二年，流辈甚称其贤。</p><p>余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达，与之论辨，言和而色夷。</p><p>自谓少时用心于学甚劳，是可谓善学者矣！</p><p>其将归见其亲也，余故道为学之难以告之。</p><p>谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉？</p>]]></content>
    
    
    <categories>
      
      <category>生活乐趣</category>
      
      <category>诗歌品读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诗词</tag>
      
      <tag>品读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NHGY面试复盘</title>
    <link href="/2022/11/10/%E5%86%9C%E8%A1%8C%E5%B9%BF%E7%A0%94%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"/>
    <url>/2022/11/10/%E5%86%9C%E8%A1%8C%E5%B9%BF%E7%A0%94%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="title-NHGY面试复盘"><a href="#title-NHGY面试复盘" class="headerlink" title="title: NHGY面试复盘"></a>title: NHGY面试复盘</h1><h3 id="001-一个类具体是怎么加载的？"><a href="#001-一个类具体是怎么加载的？" class="headerlink" title="001 - 一个类具体是怎么加载的？"></a>001 - 一个类具体是怎么加载的？</h3><blockquote><p>  参考：</p><ul><li><p>  <a href="https://blog.csdn.net/qweqwruio/article/details/81359906">类加载过程是怎样的？ - CSDN - wiseph</a></p></li><li><p>  深入理解JVM</p></li></ul></blockquote><p>一种三个阶段，加载、链接、初始化。加载是将静态的字节码加载到JVM中，链接是将静态的数据和运行中的JVM信息关联起来，初始化是对静态变量和静态代码块等内容赋初始值（用户定义的初始值）。</p><p>1.加载阶段</p><p>将来自于class文件、jar文件、网络数据源等地方的字节码文件加载到JVM里面，并在JVM中映射为JVM认可的class对象</p><p>2.链接阶段</p><p>（1）验证</p><p>验证字节码是否合法、是否安全，以防破坏JVM的安全运行。</p><p>（2）准备</p><p>将类或接口中的静态变量设置初始值，此处的重点是给静态变量分配内存空间，赋予默认的初始值，而不是用户定义的显示初始值。</p><p>比如静态变量<code>static int a = 1;</code>，此处会初始化为 int 类型的初始值 0，而不是初始化为 1。</p><p>（3）解析</p><p>将<code>常量池</code>中的 符号引用 替换为 直接引用。</p><p>符号引用是字面量，在JVM中对应的对象可以还未存在。直接引用是地址值，即指针、偏移量或句柄，指向的对象在内存中必须已经存在。</p><p>举例：中国的首都是字面量，北京市是直接引用。</p><p>解析主要对 类或接口，字段，类方法，接口方法，方法类型等进行解析。</p><p>3.初始化阶段</p><blockquote><p>  准备阶段主要对静态变量分配空间，初始化阶段主要对类的静态变量显示赋初始值和执行静态代码块的逻辑。</p></blockquote><p>即静态变量赋初始值、执行静态代码块的逻辑。</p><hr><h5 id="知识扩展："><a href="#知识扩展：" class="headerlink" title="知识扩展："></a>知识扩展：</h5><ol><li> Java 8之前的类加载器</li></ol><p>(1)启动类加载器（Bootstrap Class-Loader），加载jre/lib下面的jar文件，如rt.jar.</p><p>(2)扩展类加载器（Extension or Ext Class-Loader），负责加载我们放到jre/lib/ext目录下面的jar包，这就是所谓的extension机制。该目录也可以通过设置“java.ext.dirs”来覆盖。</p><p>(3)应用类加载器（Application or App Class-Loader），就是加载我们最熟悉的classpath的内容。这里有一个容易混淆的概念，系统（System）类加载器，通常来说，其默认就是JDK內建的应用类加载器。</p><blockquote><p>  自定义类加载器:</p>  <figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>loader<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yourcorp<span class="token punctuation">.</span></span>YourClassLoader</span> <span class="token class-name">HelloWorld</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>  如果我们指定了这个参数，JDK內建的应用类加载器就会成为定制加载器的父亲，这种方式通常用在类似需要改变双亲委派模式的场景。</p></blockquote><p>参考图：</p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211101430487.png" alt="image-20221110143031413" style="zoom:67%;" /><p>2.双亲委派机制</p><p>当类加载器（Class-Loader）试图加载某个类型的时候，除非父加载器找不到相应的类型，否则尽量将这个任务代理给当前加载器的父加载器去做。</p><p>参考上面这个结构图就很容易理解了。试想，如果不同类加载器都自己加载需要的某个类型，那么就会出现多次重复加载，完全是种浪费。</p><p>通常类加载器机制有三个基本特征：</p><ul><li>  双亲委派模型。但不是所有类加载都遵守这个模型，有的时候，启动类加载器所加载的类型，是可能要加载用户代码的。比如JDK内部的ServiceProvider/ServiceLoader机制，用户可以在标准API框架上，提供自己的实现，JDK也需要提供些默认的参考实现。例如，Java中JNDI、JDBC、文件系统、Cipher等很多方面，都是利用的这种机制，这种情况就不会用双亲委派模型去加载，而是利用所谓的上下文加载器。</li><li>  可见性。子加载器可以访问父加载器加载的类型，但是反过来是不允许的。不然，因为缺少必要的隔离，我们就没有办法利用类加载器去实现容器的逻辑。</li><li>  单一性。由于父加载器的类型对于子加载器是可见的，所以父加载器中加载过的类型，就不会在子加载器中重复加载。但是注意，类加载器“邻居”间，同一类型仍然可以被加载多次，因为互相不可见。</li></ul><h3 id="002-一个JVM程序有多少个类加载器？"><a href="#002-一个JVM程序有多少个类加载器？" class="headerlink" title="002 - 一个JVM程序有多少个类加载器？"></a>002 - 一个JVM程序有多少个类加载器？</h3><blockquote><p>  参考：</p><ul><li>  <a href="https://segmentfault.com/q/1010000014745626">JAVA为什么要有多个类加载器，1个不行吗 - segmentfault - 近光176</a></li></ul></blockquote><blockquote><p>  【前言】</p><ul><li>  类加载的作用是通过类名获取二进制字节流</li><li>  主要分为四种类加载器：启动类-&gt;扩展类-&gt;应用类-&gt;自定义类</li><li>  双亲委派的好处：越基础的类交给越高级的类加载器</li><li>  问题：只有一个加载器来加载全部的类不行吗</li></ul></blockquote><p>JVM需要不同的类加载器，而不是使用同一个类加载器，本质上是对类有不同的需求所导致的。不同的场景下使用不同的类加载器，目的是更加的灵活。</p><p>在明确 目的的情况下， 专用代码 比 通用代码 更简单，也更有效。</p><p>使用不同的类加载器，方便在不同的路径下加载不同的类。更加的灵活，也方便对类进行管理。</p><p>举例两个场景：</p><p>（1）在JVM中运行不同的程序，每个程序依赖同一个 x 类，但是依赖的该类的版本不同。有的需要版本高的 x 类，有的需要版本低的 x 类。因此使用不同的类加载器可以加载不同的类。</p><p>（2）Java具有面向切面进行功能增强的特性。怎样实现修改一个类进行特性的功能增强，而不对其它的类库产生影响呢？一个方面的方式就是对每个类库使用独立的类加载器。</p><h3 id="003-mysql的性能瓶颈在哪里，怎么排查"><a href="#003-mysql的性能瓶颈在哪里，怎么排查" class="headerlink" title="003 - mysql的性能瓶颈在哪里，怎么排查"></a>003 - mysql的性能瓶颈在哪里，怎么排查</h3><blockquote><p>  【参考】</p><ul><li>  <a href="https://developer.aliyun.com/article/177931">优化系列 | 实例解析MySQL性能瓶颈排查定位 - 阿里云开发者社区 - 晚来风急</a></li></ul><p>  【大纲】</p><ul><li>OS层面的检查<ul><li>  检查总体的负载情况</li><li>  检查哪个进程的负载高</li></ul></li><li>MySQL层面的检查<ul><li>  查看查看慢查询日志，来找到效率低的SQL语句，想办法对这个语句进行优化。</li></ul></li></ul></blockquote><p>1.OS层面的检查</p><p>OS层面的检查的目的是需要检查服务器上哪些进程的负载高。<strong>通常服务器上容易成为性能瓶颈的是磁盘的IO动作。</strong></p><p>第一步：查看整体的负载。</p><p>整体负载高的话，那么每个进程都慢。可以通过执行指令<code>w</code>或者<code>sar -q 1</code>来查看负载。</p><p>执行上述命令之后，得到结果中，字段<code>load average</code>表示当前的CPU有多少任务在排队等待。load 数值超过 5 的话，负载就挺高了。</p><blockquote><p>  子问题1：引起 CPU 负载高的可能的原因？</p><ul><li>  某些进程消耗更多的 CPU 资源，比如需要响应大量的请求（进程的事）</li><li>  物理内存不足，需要频繁的进行 swap（内存的事）</li><li>  磁盘的 IO 比较慢，导致 CPU 一直等待IO（磁盘的事）</li><li>  发生严重的中断，比如因为网络原因。（其它的事）</li></ul></blockquote><p>第二步：查看具体是哪个进程的负载高。</p><p>使用<code>top</code>命令可以查看每个进程的资源占用情况。</p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211101613719.png" alt="image-20221110161326648" style="zoom:67%;" /><p>如上图，</p><p>整体来看，通过 us 和 wa 的数值过高，可以推测当前的性能瓶颈可能是用户进行消耗 CPU 以及磁盘 IO等待 消耗CPU。</p><p>分开来看，看到下面每行中，第一、二行的进程， 字段 CPU 的数值很高，可以推出这两个进程是性能瓶颈。</p><p>查看到上面的 wa 数值高，推测是 IO 消耗大，因此这时可以执行 iotop 命令，查看哪些进程的磁盘 IO 消耗最大。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>yejr@imysql.com:~ <span class="token punctuation">]</span><span class="token comment"># iotop</span>Total DISK READ: <span class="token number">60.38</span> M/s <span class="token operator">|</span> Total DISK WRITE: <span class="token number">640.34</span> K/s  TID  PRIO  <span class="token environment constant">USER</span>     DISK READ  DISK WRITE  SWAPIN     IO<span class="token operator">></span>    COMMAND<span class="token number">16397</span> be/4 mysql       <span class="token number">8.92</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">94.77</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span> <span class="token number">7295</span> be/4 mysql      <span class="token number">10.98</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">93.59</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span><span class="token number">14295</span> be/4 mysql      <span class="token number">10.50</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">93.57</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span><span class="token number">14288</span> be/4 mysql      <span class="token number">14.30</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">91.86</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span><span class="token number">14292</span> be/4 mysql      <span class="token number">14.37</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">91.23</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到，端口号是3320的实例消耗的磁盘I/O资源比较多，那就看看这个实例里都有什么查询在跑吧。</p><p>2.MySQL层面的检查</p><p>首先看下当前都有哪些查询在运行（横版查看）：<code>mysqladmin pr|grep -v Sleep</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>yejr@imysql.com<span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> mysqladmin <span class="token function">pr</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> Sleep+----+----+----------+----+-------+-----+--------------+-----------------------------------------------------------------------------------------------+<span class="token operator">|</span> Id <span class="token operator">|</span>User<span class="token operator">|</span> Host     <span class="token operator">|</span> db <span class="token operator">|</span>Command<span class="token operator">|</span>Time <span class="token operator">|</span> State        <span class="token operator">|</span> Info                                                                                          <span class="token operator">|</span>+----+----+----------+----+-------+-----+--------------+-----------------------------------------------------------------------------------------------+<span class="token operator">|</span> <span class="token number">25</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8519 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">68</span>  <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">404612</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">26</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8520 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">65</span>  <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">484915</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">28</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8522 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">130</span> <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">404641</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">27</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8521 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">167</span> <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">324157</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">36</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8727 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">174</span> <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">324346</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span>+----+----+----------+----+-------+-----+--------------+-----------------------------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>通过上面的结果可以看到还有不少的慢查询在进行。通过 slow query log 也能发现慢的 SQL 语句。</p><p>慢查询语句为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select max(Fvideoid) from (select Fvideoid from t where Fvideoid&gt;404612 order by Fvideoid) t1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这种方式先正排序，然后查询最大。查询效率非常低，因为只需要求最大值，却需要全表扫描。</p><p>优化方式为：查询之后倒排，然后取第一条。</p><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select Fvideoid from t where Fvideoid&gt;404612 order by Fvideoid desc limit 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>3.小结</p><p>在实际的生产环境中，可能导致产生性能瓶颈的原因通常有：</p><p><strong>（1）IO瓶颈：</strong></p><ul><li>  一次请求读写的数据量太大，比如一条SQL可能要读取几万行数据，这种情况最好减少一次读写的量</li></ul><p><strong>（2）没有合适的索引：</strong></p><ul><li>  没有建立合适的索引帮助进行过滤、排序、分组等。这个时候可以添加索引或者SQL改写</li></ul><p><strong>（3）并发量压垮服务器：</strong></p><ul><li>  瞬间请求量太大，导致服务器雪崩</li></ul><p><strong>（4）服务器自适应节能策略导致反应不及时</strong></p><p>服务器自身的节能策略发现负载较低时会让CPU降频，当发现负载升高时再自动升频，但通常不是那么及时，结果导致CPU性能不足，抗不过突发的请求；</p><h3 id="004-http常见的状态码"><a href="#004-http常见的状态码" class="headerlink" title="004 - http常见的状态码"></a>004 - http常见的状态码</h3><blockquote><ul><li>  http常见的状态码要背一下，不要只知道大概。比如每类记3个</li><li>  (方法)尝试不要根据数字记状态，否则容易记混，根据状态记数字。</li><li>2022年11月11日默写：<ul><li>  100继续，101根据客户端要求升级协议</li><li>  200ok，201成功创建，202成功接收，204成功但无返回内容</li><li>  301永久重定向，302临时重定向，304未改变</li><li>  400语法错误，401未授权，403丑拒，404未找到</li><li>  500服务器内部错误，501内支持，502网关处出错，503服务器不可用</li></ul></li></ul></blockquote><h5 id="信息响应-100–199"><a href="#信息响应-100–199" class="headerlink" title="信息响应(100–199)"></a>信息响应(100–199)</h5><ul><li>  继续 - 100</li><li>  服务器根据客户端的请求切换协议 - 101</li></ul><h5 id="成功响应-200–299-（缺3）"><a href="#成功响应-200–299-（缺3）" class="headerlink" title="成功响应(200–299)（缺3）"></a>成功响应(200–299)（缺3）</h5><ul><li>  请求成功 - 200</li><li>  已创建。成功请求并创建了新的资源 - 201</li><li>  已接受。已经接受请求，但未处理完成 - 202</li><li>  无内容。服务器成功处理，但未返回内容 - 204</li></ul><h5 id="重定向-300–399-（缺0、3）"><a href="#重定向-300–399-（缺0、3）" class="headerlink" title="重定向(300–399)（缺0、3）"></a>重定向(300–399)（缺0、3）</h5><ul><li>  资源被永久转移到其它的URL - 301</li><li>  临时移动 - 302</li><li>  未修改 - 304</li></ul><h5 id="客户端错误-400–499-（缺2）"><a href="#客户端错误-400–499-（缺2）" class="headerlink" title="客户端错误(400–499)（缺2）"></a>客户端错误(400–499)（缺2）</h5><ul><li>  请求的语法错误 - 400（我不李姐） - Bad Request</li><li>  <code>未</code>授权 - 401 - Unauthorized（农行广研面试问题）</li><li>  禁止 - 403 - Forbidden</li><li>  请求的资源不存在 - 404 - not found</li></ul><h5 id="服务器错误-500–599"><a href="#服务器错误-500–599" class="headerlink" title="服务器错误 (500–599)"></a>服务器错误 (500–599)</h5><ul><li>  内部服务器错误 - 500 - Internal Server Error</li><li>  功能<code>未</code>实现 - 501 - Not Implemented</li><li>  （网关处出问题）网关从服务器收到了一个无效的响应 - 502 - Bad Gateway    </li><li>  （服务器处出问题）服务不可用，比如正在维护 - 503 - Service Unavailable</li></ul><h3 id="005-Java是值传递还是引用传递"><a href="#005-Java是值传递还是引用传递" class="headerlink" title="005 - Java是值传递还是引用传递"></a>005 - Java是值传递还是引用传递</h3><p>值传递，值传递，值传递</p>]]></content>
    
    
    <categories>
      
      <category>面试复盘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>复盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决一直困扰的坚果云在资源管理器中左边栏显示问题</title>
    <link href="/2022/11/08/%E8%A7%A3%E5%86%B3%E4%B8%80%E7%9B%B4%E5%9B%B0%E6%89%B0%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%9C%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E5%B7%A6%E8%BE%B9%E6%A0%8F%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/08/%E8%A7%A3%E5%86%B3%E4%B8%80%E7%9B%B4%E5%9B%B0%E6%89%B0%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%9C%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E5%B7%A6%E8%BE%B9%E6%A0%8F%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>  参考：<a href="https://loesspie.com/2021/01/19/win10-remove-jianguoyun/">https://loesspie.com/2021/01/19/win10-remove-jianguoyun/</a></p><p>  日期：2022年11月8日alec实测有效</p></blockquote><p>其实一直在用坚果云，但仅仅是自动同步一些文件和文件夹，并不需要在我的资源管理器里有那么强的存在感<br>同时现在用 库 功能比较多，汇总各类相同属性/用途的文件或文件夹不要太方便。所以它在那儿占着位置看着碍眼了<br>但网上一堆方法都无效，只能自己上，搞定之后记录下</p><p>首先是通过全局搜索坚果云，找到了N个条目，然后尝试修改其名称（默认项），如改为坚果云云</p><p>当找到正确的条目之后，打开资源管理器，会发现左边栏会变成坚果云云，然后将此项的ispinned从1改成0，会发现资源管理器左栏的图标已经消失</p><p>消失之后，再全局搜索坚果云云，将其改成坚果云.</p><p>如此，便整洁许多</p><p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211081724039.png" alt="image-20221108172445976"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>坚果云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>坚果云</tag>
      
      <tag>资源管理器</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
