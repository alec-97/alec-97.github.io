<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>送东阳马生序 - 明 - 宋濂</title>
    <link href="/2022/11/10/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F%20-%20%E5%AE%8B%E6%BF%82/"/>
    <url>/2022/11/10/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F%20-%20%E5%AE%8B%E6%BF%82/</url>
    
    <content type="html"><![CDATA[<p>余幼时即嗜学。</p><p>家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。</p><p>录毕，走送之，不敢稍逾约。</p><p>以是人多以书假余，余因得遍观群书。</p><p>既加冠，益慕圣贤之道 ，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。</p><p>先达德隆望尊，门人弟子填其室，未尝稍降辞色。</p><p>余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。</p><p>当余之从师也，负箧曳屣行深山巨谷中，穷冬烈风，大雪深数尺，足肤皲裂而不知。</p><p>至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。</p><p>寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意。</p><p>以中有足乐者，不知口体之奉不若人也。</p><p>盖余之勤且艰若此。</p><p>今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？</p><p>今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。</p><p>其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！</p><p>东阳马生君则，在太学已二年，流辈甚称其贤。</p><p>余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达，与之论辨，言和而色夷。</p><p>自谓少时用心于学甚劳，是可谓善学者矣！</p><p>其将归见其亲也，余故道为学之难以告之。</p><p>谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉？</p>]]></content>
    
    
    <categories>
      
      <category>生活乐趣</category>
      
      <category>诗歌品读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诗词</tag>
      
      <tag>品读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NHGY面试复盘</title>
    <link href="/2022/11/10/%E5%86%9C%E8%A1%8C%E5%B9%BF%E7%A0%94%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"/>
    <url>/2022/11/10/%E5%86%9C%E8%A1%8C%E5%B9%BF%E7%A0%94%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="title-NHGY面试复盘"><a href="#title-NHGY面试复盘" class="headerlink" title="title: NHGY面试复盘"></a>title: NHGY面试复盘</h1><h3 id="001-一个类具体是怎么加载的？"><a href="#001-一个类具体是怎么加载的？" class="headerlink" title="001 - 一个类具体是怎么加载的？"></a>001 - 一个类具体是怎么加载的？</h3><blockquote><p>  参考：</p><ul><li><p>  <a href="https://blog.csdn.net/qweqwruio/article/details/81359906">类加载过程是怎样的？ - CSDN - wiseph</a></p></li><li><p>  深入理解JVM</p></li></ul></blockquote><p>一种三个阶段，加载、链接、初始化。加载是将静态的字节码加载到JVM中，链接是将静态的数据和运行中的JVM信息关联起来，初始化是对静态变量和静态代码块等内容赋初始值（用户定义的初始值）。</p><p>1.加载阶段</p><p>将来自于class文件、jar文件、网络数据源等地方的字节码文件加载到JVM里面，并在JVM中映射为JVM认可的class对象</p><p>2.链接阶段</p><p>（1）验证</p><p>验证字节码是否合法、是否安全，以防破坏JVM的安全运行。</p><p>（2）准备</p><p>将类或接口中的静态变量设置初始值，此处的重点是给静态变量分配内存空间，赋予默认的初始值，而不是用户定义的显示初始值。</p><p>比如静态变量<code>static int a = 1;</code>，此处会初始化为 int 类型的初始值 0，而不是初始化为 1。</p><p>（3）解析</p><p>将<code>常量池</code>中的 符号引用 替换为 直接引用。</p><p>符号引用是字面量，在JVM中对应的对象可以还未存在。直接引用是地址值，即指针、偏移量或句柄，指向的对象在内存中必须已经存在。</p><p>举例：中国的首都是字面量，北京市是直接引用。</p><p>解析主要对 类或接口，字段，类方法，接口方法，方法类型等进行解析。</p><p>3.初始化阶段</p><blockquote><p>  准备阶段主要对静态变量分配空间，初始化阶段主要对类的静态变量显示赋初始值和执行静态代码块的逻辑。</p></blockquote><p>即静态变量赋初始值、执行静态代码块的逻辑。</p><hr><h5 id="知识扩展："><a href="#知识扩展：" class="headerlink" title="知识扩展："></a>知识扩展：</h5><ol><li> Java 8之前的类加载器</li></ol><p>(1)启动类加载器（Bootstrap Class-Loader），加载jre/lib下面的jar文件，如rt.jar.</p><p>(2)扩展类加载器（Extension or Ext Class-Loader），负责加载我们放到jre/lib/ext目录下面的jar包，这就是所谓的extension机制。该目录也可以通过设置“java.ext.dirs”来覆盖。</p><p>(3)应用类加载器（Application or App Class-Loader），就是加载我们最熟悉的classpath的内容。这里有一个容易混淆的概念，系统（System）类加载器，通常来说，其默认就是JDK內建的应用类加载器。</p><blockquote><p>  自定义类加载器:</p>  <figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>loader<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>yourcorp<span class="token punctuation">.</span></span>YourClassLoader</span> <span class="token class-name">HelloWorld</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>  如果我们指定了这个参数，JDK內建的应用类加载器就会成为定制加载器的父亲，这种方式通常用在类似需要改变双亲委派模式的场景。</p></blockquote><p>参考图：</p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211101430487.png" alt="image-20221110143031413" style="zoom:67%;" /><p>2.双亲委派机制</p><p>当类加载器（Class-Loader）试图加载某个类型的时候，除非父加载器找不到相应的类型，否则尽量将这个任务代理给当前加载器的父加载器去做。</p><p>参考上面这个结构图就很容易理解了。试想，如果不同类加载器都自己加载需要的某个类型，那么就会出现多次重复加载，完全是种浪费。</p><p>通常类加载器机制有三个基本特征：</p><ul><li>  双亲委派模型。但不是所有类加载都遵守这个模型，有的时候，启动类加载器所加载的类型，是可能要加载用户代码的。比如JDK内部的ServiceProvider/ServiceLoader机制，用户可以在标准API框架上，提供自己的实现，JDK也需要提供些默认的参考实现。例如，Java中JNDI、JDBC、文件系统、Cipher等很多方面，都是利用的这种机制，这种情况就不会用双亲委派模型去加载，而是利用所谓的上下文加载器。</li><li>  可见性。子加载器可以访问父加载器加载的类型，但是反过来是不允许的。不然，因为缺少必要的隔离，我们就没有办法利用类加载器去实现容器的逻辑。</li><li>  单一性。由于父加载器的类型对于子加载器是可见的，所以父加载器中加载过的类型，就不会在子加载器中重复加载。但是注意，类加载器“邻居”间，同一类型仍然可以被加载多次，因为互相不可见。</li></ul><h3 id="002-一个JVM程序有多少个类加载器？"><a href="#002-一个JVM程序有多少个类加载器？" class="headerlink" title="002 - 一个JVM程序有多少个类加载器？"></a>002 - 一个JVM程序有多少个类加载器？</h3><blockquote><p>  参考：</p><ul><li>  <a href="https://segmentfault.com/q/1010000014745626">JAVA为什么要有多个类加载器，1个不行吗 - segmentfault - 近光176</a></li></ul></blockquote><blockquote><p>  【前言】</p><ul><li>  类加载的作用是通过类名获取二进制字节流</li><li>  主要分为四种类加载器：启动类-&gt;扩展类-&gt;应用类-&gt;自定义类</li><li>  双亲委派的好处：越基础的类交给越高级的类加载器</li><li>  问题：只有一个加载器来加载全部的类不行吗</li></ul></blockquote><p>JVM需要不同的类加载器，而不是使用同一个类加载器，本质上是对类有不同的需求所导致的。不同的场景下使用不同的类加载器，目的是更加的灵活。</p><p>在明确 目的的情况下， 专用代码 比 通用代码 更简单，也更有效。</p><p>使用不同的类加载器，方便在不同的路径下加载不同的类。更加的灵活，也方便对类进行管理。</p><p>举例两个场景：</p><p>（1）在JVM中运行不同的程序，每个程序依赖同一个 x 类，但是依赖的该类的版本不同。有的需要版本高的 x 类，有的需要版本低的 x 类。因此使用不同的类加载器可以加载不同的类。</p><p>（2）Java具有面向切面进行功能增强的特性。怎样实现修改一个类进行特性的功能增强，而不对其它的类库产生影响呢？一个方面的方式就是对每个类库使用独立的类加载器。</p><h3 id="003-mysql的性能瓶颈在哪里，怎么排查"><a href="#003-mysql的性能瓶颈在哪里，怎么排查" class="headerlink" title="003 - mysql的性能瓶颈在哪里，怎么排查"></a>003 - mysql的性能瓶颈在哪里，怎么排查</h3><blockquote><p>  【参考】</p><ul><li>  <a href="https://developer.aliyun.com/article/177931">优化系列 | 实例解析MySQL性能瓶颈排查定位 - 阿里云开发者社区 - 晚来风急</a></li></ul><p>  【大纲】</p><ul><li>OS层面的检查<ul><li>  检查总体的负载情况</li><li>  检查哪个进程的负载高</li></ul></li><li>MySQL层面的检查<ul><li>  查看查看慢查询日志，来找到效率低的SQL语句，想办法对这个语句进行优化。</li></ul></li></ul></blockquote><p>1.OS层面的检查</p><p>OS层面的检查的目的是需要检查服务器上哪些进程的负载高。<strong>通常服务器上容易成为性能瓶颈的是磁盘的IO动作。</strong></p><p>第一步：查看整体的负载。</p><p>整体负载高的话，那么每个进程都慢。可以通过执行指令<code>w</code>或者<code>sar -q 1</code>来查看负载。</p><p>执行上述命令之后，得到结果中，字段<code>load average</code>表示当前的CPU有多少任务在排队等待。load 数值超过 5 的话，负载就挺高了。</p><blockquote><p>  子问题1：引起 CPU 负载高的可能的原因？</p><ul><li>  某些进程消耗更多的 CPU 资源，比如需要响应大量的请求（进程的事）</li><li>  物理内存不足，需要频繁的进行 swap（内存的事）</li><li>  磁盘的 IO 比较慢，导致 CPU 一直等待IO（磁盘的事）</li><li>  发生严重的中断，比如因为网络原因。（其它的事）</li></ul></blockquote><p>第二步：查看具体是哪个进程的负载高。</p><p>使用<code>top</code>命令可以查看每个进程的资源占用情况。</p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211101613719.png" alt="image-20221110161326648" style="zoom:67%;" /><p>如上图，</p><p>整体来看，通过 us 和 wa 的数值过高，可以推测当前的性能瓶颈可能是用户进行消耗 CPU 以及磁盘 IO等待 消耗CPU。</p><p>分开来看，看到下面每行中，第一、二行的进程， 字段 CPU 的数值很高，可以推出这两个进程是性能瓶颈。</p><p>查看到上面的 wa 数值高，推测是 IO 消耗大，因此这时可以执行 iotop 命令，查看哪些进程的磁盘 IO 消耗最大。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>yejr@imysql.com:~ <span class="token punctuation">]</span><span class="token comment"># iotop</span>Total DISK READ: <span class="token number">60.38</span> M/s <span class="token operator">|</span> Total DISK WRITE: <span class="token number">640.34</span> K/s  TID  PRIO  <span class="token environment constant">USER</span>     DISK READ  DISK WRITE  SWAPIN     IO<span class="token operator">></span>    COMMAND<span class="token number">16397</span> be/4 mysql       <span class="token number">8.92</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">94.77</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span> <span class="token number">7295</span> be/4 mysql      <span class="token number">10.98</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">93.59</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span><span class="token number">14295</span> be/4 mysql      <span class="token number">10.50</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">93.57</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span><span class="token number">14288</span> be/4 mysql      <span class="token number">14.30</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">91.86</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span><span class="token number">14292</span> be/4 mysql      <span class="token number">14.37</span> M/s    <span class="token number">0.00</span> B/s  <span class="token number">0.00</span> % <span class="token number">91.23</span> % mysqld <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/usr/local/m~og_3320/mysql.sock <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3320</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看到，端口号是3320的实例消耗的磁盘I/O资源比较多，那就看看这个实例里都有什么查询在跑吧。</p><p>2.MySQL层面的检查</p><p>首先看下当前都有哪些查询在运行（横版查看）：<code>mysqladmin pr|grep -v Sleep</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>yejr@imysql.com<span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> mysqladmin <span class="token function">pr</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> Sleep+----+----+----------+----+-------+-----+--------------+-----------------------------------------------------------------------------------------------+<span class="token operator">|</span> Id <span class="token operator">|</span>User<span class="token operator">|</span> Host     <span class="token operator">|</span> db <span class="token operator">|</span>Command<span class="token operator">|</span>Time <span class="token operator">|</span> State        <span class="token operator">|</span> Info                                                                                          <span class="token operator">|</span>+----+----+----------+----+-------+-----+--------------+-----------------------------------------------------------------------------------------------+<span class="token operator">|</span> <span class="token number">25</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8519 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">68</span>  <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">404612</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">26</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8520 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">65</span>  <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">484915</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">28</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8522 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">130</span> <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">404641</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">27</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8521 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">167</span> <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">324157</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">36</span> <span class="token operator">|</span> x <span class="token operator">|</span> <span class="token number">10</span>.x:8727 <span class="token operator">|</span> db <span class="token operator">|</span> Query <span class="token operator">|</span> <span class="token number">174</span> <span class="token operator">|</span> Sending data <span class="token operator">|</span> <span class="token keyword">select</span> max<span class="token punctuation">(</span>Fvideoid<span class="token punctuation">)</span> from <span class="token punctuation">(</span>select Fvideoid from t where Fvideoid<span class="token operator">></span><span class="token number">324346</span> order by Fvideoid<span class="token punctuation">)</span> t1 <span class="token operator">|</span>+----+----+----------+----+-------+-----+--------------+-----------------------------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>通过上面的结果可以看到还有不少的慢查询在进行。通过 slow query log 也能发现慢的 SQL 语句。</p><p>慢查询语句为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select max(Fvideoid) from (select Fvideoid from t where Fvideoid&gt;404612 order by Fvideoid) t1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这种方式先正排序，然后查询最大。查询效率非常低，因为只需要求最大值，却需要全表扫描。</p><p>优化方式为：查询之后倒排，然后取第一条。</p><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select Fvideoid from t where Fvideoid&gt;404612 order by Fvideoid desc limit 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>3.小结</p><p>在实际的生产环境中，可能导致产生性能瓶颈的原因通常有：</p><p><strong>（1）IO瓶颈：</strong></p><ul><li>  一次请求读写的数据量太大，比如一条SQL可能要读取几万行数据，这种情况最好减少一次读写的量</li></ul><p><strong>（2）没有合适的索引：</strong></p><ul><li>  没有建立合适的索引帮助进行过滤、排序、分组等。这个时候可以添加索引或者SQL改写</li></ul><p><strong>（3）并发量压垮服务器：</strong></p><ul><li>  瞬间请求量太大，导致服务器雪崩</li></ul><p><strong>（4）服务器自适应节能策略导致反应不及时</strong></p><p>服务器自身的节能策略发现负载较低时会让CPU降频，当发现负载升高时再自动升频，但通常不是那么及时，结果导致CPU性能不足，抗不过突发的请求；</p><h3 id="004-http常见的状态码"><a href="#004-http常见的状态码" class="headerlink" title="004 - http常见的状态码"></a>004 - http常见的状态码</h3><blockquote><ul><li>  http常见的状态码要背一下，不要只知道大概。比如每类记3个</li><li>  (方法)尝试不要根据数字记状态，否则容易记混，根据状态记数字。</li><li>2022年11月11日默写：<ul><li>  100继续，101根据客户端要求升级协议</li><li>  200ok，201成功创建，202成功接收，204成功但无返回内容</li><li>  301永久重定向，302临时重定向，304未改变</li><li>  400语法错误，401未授权，403丑拒，404未找到</li><li>  500服务器内部错误，501内支持，502网关处出错，503服务器不可用</li></ul></li></ul></blockquote><h5 id="信息响应-100–199"><a href="#信息响应-100–199" class="headerlink" title="信息响应(100–199)"></a>信息响应(100–199)</h5><ul><li>  继续 - 100</li><li>  服务器根据客户端的请求切换协议 - 101</li></ul><h5 id="成功响应-200–299-（缺3）"><a href="#成功响应-200–299-（缺3）" class="headerlink" title="成功响应(200–299)（缺3）"></a>成功响应(200–299)（缺3）</h5><ul><li>  请求成功 - 200</li><li>  已创建。成功请求并创建了新的资源 - 201</li><li>  已接受。已经接受请求，但未处理完成 - 202</li><li>  无内容。服务器成功处理，但未返回内容 - 204</li></ul><h5 id="重定向-300–399-（缺0、3）"><a href="#重定向-300–399-（缺0、3）" class="headerlink" title="重定向(300–399)（缺0、3）"></a>重定向(300–399)（缺0、3）</h5><ul><li>  资源被永久转移到其它的URL - 301</li><li>  临时移动 - 302</li><li>  未修改 - 304</li></ul><h5 id="客户端错误-400–499-（缺2）"><a href="#客户端错误-400–499-（缺2）" class="headerlink" title="客户端错误(400–499)（缺2）"></a>客户端错误(400–499)（缺2）</h5><ul><li>  请求的语法错误 - 400（我不李姐） - Bad Request</li><li>  <code>未</code>授权 - 401 - Unauthorized（农行广研面试问题）</li><li>  禁止 - 403 - Forbidden</li><li>  请求的资源不存在 - 404 - not found</li></ul><h5 id="服务器错误-500–599"><a href="#服务器错误-500–599" class="headerlink" title="服务器错误 (500–599)"></a>服务器错误 (500–599)</h5><ul><li>  内部服务器错误 - 500 - Internal Server Error</li><li>  功能<code>未</code>实现 - 501 - Not Implemented</li><li>  （网关处出问题）网关从服务器收到了一个无效的响应 - 502 - Bad Gateway    </li><li>  （服务器处出问题）服务不可用，比如正在维护 - 503 - Service Unavailable</li></ul><h3 id="005-Java是值传递还是引用传递"><a href="#005-Java是值传递还是引用传递" class="headerlink" title="005 - Java是值传递还是引用传递"></a>005 - Java是值传递还是引用传递</h3><p>值传递，值传递，值传递</p>]]></content>
    
    
    <categories>
      
      <category>面试复盘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>复盘</tag>
      
      <tag>农业银行研发中心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决一直困扰的坚果云在资源管理器中左边栏显示问题</title>
    <link href="/2022/11/08/%E8%A7%A3%E5%86%B3%E4%B8%80%E7%9B%B4%E5%9B%B0%E6%89%B0%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%9C%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E5%B7%A6%E8%BE%B9%E6%A0%8F%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/08/%E8%A7%A3%E5%86%B3%E4%B8%80%E7%9B%B4%E5%9B%B0%E6%89%B0%E7%9A%84%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%9C%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E5%B7%A6%E8%BE%B9%E6%A0%8F%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>  参考：<a href="https://loesspie.com/2021/01/19/win10-remove-jianguoyun/">https://loesspie.com/2021/01/19/win10-remove-jianguoyun/</a></p><p>  日期：2022年11月8日alec实测有效</p></blockquote><p>其实一直在用坚果云，但仅仅是自动同步一些文件和文件夹，并不需要在我的资源管理器里有那么强的存在感<br>同时现在用 库 功能比较多，汇总各类相同属性/用途的文件或文件夹不要太方便。所以它在那儿占着位置看着碍眼了<br>但网上一堆方法都无效，只能自己上，搞定之后记录下</p><p>首先是通过全局搜索坚果云，找到了N个条目，然后尝试修改其名称（默认项），如改为坚果云云</p><p>当找到正确的条目之后，打开资源管理器，会发现左边栏会变成坚果云云，然后将此项的ispinned从1改成0，会发现资源管理器左栏的图标已经消失</p><p>消失之后，再全局搜索坚果云云，将其改成坚果云.</p><p>如此，便整洁许多</p><p><img src="https://cdn.jsdelivr.net/gh/Alec-97/alec-s-images-cloud/img/202211081724039.png" alt="image-20221108172445976"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>坚果云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>坚果云</tag>
      
      <tag>资源管理器</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
